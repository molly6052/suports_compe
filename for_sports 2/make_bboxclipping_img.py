# -*- coding: utf-8 -*-
"""make_bboxclipping_img.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1swwsL4mgObJhObbGkHlSvoAQJuv9kfoy
"""

import csv
import cv2
import os
import pandas as pd
import numpy as np

# original_cap = cv2.VideoCapture("/content/drive/MyDrive/2018WCB_60_P2_SELLO_Edwin_BOT_NAZIR_BIN_Abdou_MAD.mp4") #オリジナル動画
# ret_ori, img_ori = original_cap.read()


# ret_mask, img_mask = cap_mask.read()

csv_make_list = ["Videoframe", "X_min", "Y_min", "X_max", "Y_max"] #csvファイルの形式決定
csv_df1 = pd.DataFrame([csv_make_list]) #形式決定したものをデータフレームに変換
csv_df2 = pd.DataFrame([csv_make_list]) #形式決定したものをデータフレームに変換

csv_save_path = "/content/drive/MyDrive" #csv保存先のディレクトリのpath
csv_make_path1 = os.path.join(csv_save_path, 'mask_bbox_coordinate_player1.csv') #csv保存先のpath
csv_df1.to_csv(csv_make_path1, index = False) #データフレームをCSVに変換

csv_make_path2 = os.path.join(csv_save_path, 'mask_bbox_coordinate_player2.csv') #csv保存先のpath
csv_df2.to_csv(csv_make_path2, index = False) #データフレームをCSVに変換

def bbox_for_mask1(img_mask, now_frame, plus = 0):
  # im = cv2.cvtColor(img_mask, cv2.COLOR_BGR2GRAY) #グレースケール化 二次元配列にしないとダメ
  im = img_mask*255
  im = np.where(im ==255, True, False) #0,255をFalse,Trueに変換

  now_frame += 1 #現在のフレーム

  ########bbox座標の計算##################
  rows = np.any(im, axis=1)
  cols = np.any(im, axis=0)

  y_min, y_max = np.where(rows)[0][[0, -1]]
  x_min, x_max = np.where(cols)[0][[0, -1]]

  # print(im.shape)
  # print(y_min, y_max, x_min, x_max)

  left_up = (x_min - plus,y_max + plus) #左上座標
  right_up = (x_max + plus, y_max + plus) #右上座標
  left_low = (x_min ,y_min) #左下座標
  right_low = (x_max ,y_min) #右下座標

  coor_list = [left_up, #左上座標
                right_up, #右上座標
                right_low, #右下座標
                left_low #左下座標

  ]

  # coor_list = [(x,y) for x, y in zip(coor_x, coor_y)]
  pts = np.array(coor_list)
  img_mask = img_mask*0
  img_mask = cv2.fillPoly(img_mask, [pts], 255)

  #####################################

  #####CSVの書き込み############
  with open(csv_make_path1, 'a') as f:
      writer = csv.writer(f)
      writer.writerow([now_frame, x_min, y_min, x_max, y_max])

  return img_mask

def bbox_for_mask2(img_mask, now_frame, plus = 0):
  #im = cv2.cvtColor(img_mask, cv2.COLOR_BGR2GRAY) #グレースケール化 二次元配列にしないとダメ
  im = img_mask*255
  im = np.where(im ==255, True, False) #0,255をFalse,Trueに変換

  now_frame += 1 #現在のフレーム

  ########bbox座標の計算##################
  rows = np.any(im, axis=1)
  cols = np.any(im, axis=0)

  y_min, y_max = np.where(rows)[0][[0, -1]]
  x_min, x_max = np.where(cols)[0][[0, -1]]

  # print(im.shape)
  # print(y_min, y_max, x_min, x_max)

  left_up = (x_min - plus,y_max + plus) #左上座標
  right_up = (x_max + plus, y_max + plus) #右上座標
  left_low = (x_min,y_min) #左下座標
  right_low = (x_max,y_min) #右下座標

  coor_list = [left_up, #左上座標
                right_up, #右上座標
                right_low, #右下座標
                left_low #左下座標
  ]

  # coor_list = [(x,y) for x, y in zip(coor_x, coor_y)]
  pts = np.array(coor_list)
  img_mask = img_mask*0
  cv2.fillPoly(img_mask, [pts], 255)

  #####################################

  #####CSVの書き込み############
  with open(csv_make_path2, 'a') as f:
      writer = csv.writer(f)
      writer.writerow([now_frame, x_min, y_min, x_max, y_max])

  return img_mask